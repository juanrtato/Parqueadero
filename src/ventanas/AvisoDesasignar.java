/**
 * FUNCIONALIDAD:YA ESTÁ TERMINADA
 * APARIENCIA:SIN TERMINAR
 */
package ventanas;

import clases.Plaza;
import clases.Ticket;
import clases.Conectar;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Date;

/**
 *
 * @author angel y juan
 */
public class AvisoDesasignar extends javax.swing.JFrame {

    private Plaza plaza;
    private VentanaPlazas ventanaPlazas; //Está será la interfaz principal que llama a esta ventana, la uso para cambiar la ventana de disponibilidad
    private VentanaDisponible ventanaDisponible;
    private VentanaOcupado ventanaOcupado;

    /**
     * Creates new form avisoEstadoGeneral
     *
     * @param parqueadero
     */
    public AvisoDesasignar(Plaza plaza, VentanaPlazas ventanaPlazas, VentanaOcupado ventanaOcupado) {
        this.plaza = plaza;
        this.ventanaPlazas = ventanaPlazas;
        this.ventanaOcupado = ventanaOcupado;
        this.ventanaDisponible = null;
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("$"+String.valueOf(this.precioGenerado()));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("¿Está seguro de liberar la plaza?");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("El valor a cancelar es de:");

        jButton1.setText("Sí");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("No");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jLabel2)
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(55, 55, 55))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //Actualizar estado en la bd

        Conectar conexion = new Conectar();
        Connection reg = conexion.getConnection();

        Date ahora = new Date();
        int id = this.plaza.getOcupante().getId();
        String fechaSal = Integer.toString(ahora.getHours()) + ":" + Integer.toString(ahora.getMinutes()) + ":" + Integer.toString(ahora.getSeconds()) + "  " + Integer.toString(ahora.getDate()) + "/" + Integer.toString(ahora.getMonth() + 1) + "/" + Integer.toString(ahora.getYear() + 1900);
        String precio = String.valueOf(this.precioGenerado());

        String sq = "UPDATE ocupante SET fecha_salida='" + fechaSal + "', precio_ocup = '"+precio+"' WHERE id_ocup=?";

        try {

            PreparedStatement psd = reg.prepareStatement(sq);
            psd.setString(1, Integer.toString(id));

            int n = psd.executeUpdate();
            if (n > 0) {
                JOptionPane.showMessageDialog(null, "Salida del vehiculo guardada con éxito en la base de datos");
                this.plaza.desasignarOcupante();
                this.ventanaDisponible = new VentanaDisponible(this.ventanaPlazas);
                this.ventanaDisponible.actualizarVentana(this.plaza);
                this.ventanaDisponible.setVisible(true);
                this.ventanaOcupado.setVisible(false);
                

            } else {
                JOptionPane.showMessageDialog(null, "Error de conexión, no se ha desasignado la plaza");
            }

        } catch (SQLException ex) {
            Logger.getLogger(VentanaDisponible.class.getName()).log(Level.SEVERE, null, ex);
        }

        conexion.desconectar();

        this.setVisible(false);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * Convierte la fecha almacenada (ya sea de entrada o de salida) a minutos
     * en formato double para poder determinar el tiempo que tardó el ocupante
     * en la plaza
     *
     * @param fecha en formato String.
     */
    private double convertirFechaAMinutos(String fecha) { //Halla los minutos contenidos en una fecha
        double valores[] = new double[6];
        int a;
        for (int i = 0; i < 2; i++) {
            a = fecha.indexOf(":");
            valores[i] = Double.parseDouble(fecha.substring(0, a));
            fecha = fecha.substring(a + 1);
        }
        a = fecha.indexOf(" ");
        valores[2] = Double.parseDouble(fecha.substring(0, a));
        fecha = fecha.substring(a + 1);
        for (int i = 3; i < 5; i++) {
            a = fecha.indexOf("/");
            valores[i] = Double.parseDouble(fecha.substring(0, a));
            fecha = fecha.substring(a + 1);
        }
        valores[5] = Double.parseDouble(fecha);
        return (valores[0] * 60) + valores[1] + (valores[3] * 1440) + (valores[4] * 43200) + (valores[5] * 518400);
    }

    /**
     * Genera el precio a pagar sugerido (Si se demora mas de un minuto en la
     * transacción cobra el minuto adicional pero no lo informa)
     *
     * @param fecha en formato String.
     */
    public double precioGenerado() {
        
        double precio = 0;

        if (this.plaza.getOcupante().getVehiculo().getTipo().equals("CARRO")) { //Se establece el tipo de vehiculo que se encontraba en él para establecer el valor a cobrar

            precio = Ticket.getValorPorMinutoCarros();
        } else {
            precio = Ticket.getValorPorMinutoMotos();
        }
        double time = this.tiempoGenerado();
        double precioT= Math.round(time*precio);
        return precioT;
        
    }
    /**
     * Genera el tiempo total que lleva el carro en el parqueadero
     *
     * @param fecha en formato String.
     */
    public double tiempoGenerado() {
        Date fecha = new Date();
        String fechaSalida = Integer.toString(fecha.getHours()) + ":" + Integer.toString(fecha.getMinutes()) + ":" + Integer.toString(fecha.getSeconds()) + "  " + Integer.toString(fecha.getDate()) + "/" + Integer.toString(fecha.getMonth() + 1) + "/" + Integer.toString(fecha.getYear() + 1900);
        double minutosEntrada = convertirFechaAMinutos(this.plaza.getOcupante().getFechaEntrada());
        double minutosSalida = convertirFechaAMinutos(fechaSalida);
        double tiempoTotal = (minutosSalida - minutosEntrada);
        return tiempoTotal;
        
    }

/**
 * @param args the command line arguments
 */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
